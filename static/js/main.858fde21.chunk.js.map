{"version":3,"sources":["components/SearchForm.tsx","components/PhotosList.tsx","App.tsx","global.tsx","index.tsx"],"names":["SearchForm","search","setSearch","setLoading","setList","GetImages","image","a","axios","url","data","console","log","response","InputRow","Col","Input","id","name","placeholder","value","query","onChange","e","target","defaultProps","styled","div","input","PhotosList","list","loading","Row","totalHits","hits","map","item","i","ImageCol","data-lightbox","href","largeImageURL","src","webformatURL","alt","className","NoData","App","useState","Container","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAKMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,QAC7CC,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEdJ,GAAcA,GAAW,GAFX,SAGSK,IAAM,CAC3BC,IACE,qEACAH,EACA,kCAPU,gBAGNI,EAHM,EAGNA,KAMRN,GAAWA,EAAQM,GATL,gDAWdC,QAAQC,IAAI,KAAIC,UAXF,yBAadV,GAAcA,GAAW,GAbX,4EAAH,sDA4Bf,OACE,mCACE,cAACW,EAAD,UACE,cAACC,EAAD,UACE,cAACC,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,YAAY,YACZC,MAAOnB,EAAOoB,MACdC,SApBI,SACZC,GAEArB,GACEA,EAAU,2BACLD,GADI,kBAENsB,EAAEC,OAAON,KAAOK,EAAEC,OAAOJ,SAE9Bf,EAAUkB,EAAEC,OAAOJ,iBAyBvBpB,EAAWyB,aAAe,CACxBxB,OAAQ,CAAEoB,MAAO,IACjBnB,UAAW,CAAEmB,MAAO,KAGPrB,I,MAAAA,IAETc,EAAWY,IAAOC,IAAV,yIAURZ,EAAMW,IAAOC,IAAV,yKAUHX,EAAQU,IAAOE,MAAV,slBC/ELC,EAAa,SAAC,GAAsC,IAApC5B,EAAmC,EAAnCA,OAAQ6B,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAClC,OACE,mCACE,cAACC,EAAD,UACG/B,EAAOoB,MACNS,GAAQA,EAAKG,UAAY,EACvBF,EACED,EAAKI,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACZ,cAACC,EAAD,UACE,mBAAGC,gBAAc,YAAYC,KAAMJ,EAAKK,cAAxC,SACE,qBAAKC,IAAKN,EAAKO,aAAcC,IAAI,QAFtBP,MAOjB,qBAAKQ,UAAU,YAGjB,cAACC,EAAD,+BAGF,QAaVjB,EAAWJ,aAAe,CACxBxB,OAAQ,CAAEoB,MAAO,IACjBS,KAAM,GACNC,SAAS,GAGIF,I,IAAAA,IAETS,EAAWZ,IAAOC,IAAV,gFAORmB,EAASpB,IAAOC,IAAV,qKASNK,EAAMN,IAAOC,IAAV,8OC/BMoB,EAxBH,WAAO,IAAD,EACYC,mBAAiB,CAC3C3B,MAAO,KAFO,mBACTpB,EADS,KACDC,EADC,OAIQ8C,qBAJR,mBAITlB,EAJS,KAIH1B,EAJG,OAKc4C,oBAAkB,GALhC,mBAKTjB,EALS,KAKA5B,EALA,KAOhB,OACE,mCACE,eAAC8C,EAAD,WACE,gDACA,cAAC,EAAD,CACEhD,OAAQA,EACRC,UAAWA,EACXE,QAASA,EACTD,WAAYA,IAEd,cAAC,EAAD,CAAY2B,KAAMA,EAAM7B,OAAQA,EAAQ8B,QAASA,IACjD,6DAQFkB,EAAYvB,IAAOC,IAAV,oEC/BAuB,cAAf,2yB,QCIAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.858fde21.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Props } from \"../typings\";\r\nimport axios from \"axios\";\r\n\r\nconst SearchForm = ({ search, setSearch, setLoading, setList }: Props) => {\r\n  const GetImages = async (image: string) => {\r\n    try {\r\n      setLoading && setLoading(true);\r\n      const { data } = await axios({\r\n        url:\r\n          \"https://pixabay.com/api/?key=18269871-9984b5717c4bef14378a76910&q=\" +\r\n          image +\r\n          \"&image_type=photo&pretty=true\",\r\n      });\r\n      setList && setList(data);\r\n    } catch (err) {\r\n      console.log(err.response);\r\n    } finally {\r\n      setLoading && setLoading(true);\r\n    }\r\n  };\r\n\r\n  const typer = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setSearch &&\r\n      setSearch({\r\n        ...search,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    GetImages(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputRow>\r\n        <Col>\r\n          <Input\r\n            id=\"query\"\r\n            name=\"query\"\r\n            placeholder=\"Type here\"\r\n            value={search.query}\r\n            onChange={typer}\r\n          />\r\n        </Col>\r\n      </InputRow>\r\n    </>\r\n  );\r\n};\r\n\r\nSearchForm.propTypes = {\r\n  search: PropTypes.object.isRequired,\r\n  setSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nSearchForm.defaultProps = {\r\n  search: { query: \"\" },\r\n  setSearch: { query: \"\" },\r\n};\r\n\r\nexport default SearchForm;\r\n\r\nconst InputRow = styled.div`\r\n  display: grid;\r\n  width: 40%;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 1900px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Col = styled.div`\r\n  margin-top: 30px;\r\n\r\n  @media (min-width: 900px) and (max-width: 1900px) {\r\n    display: grid;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  min-height: calc(1.5em + 0.75rem + 2px);\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid gray;\r\n  appearance: none;\r\n  border-radius: 0.25rem;\r\n  margin-bottom: 10px;\r\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n\r\n  &:focus {\r\n    border-color: #0275d8;\r\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset, 0 0 8px lightblue;\r\n    outline: 0 none;\r\n  }\r\n`;\r\n","import { Props } from \"../typings\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PhotosList = ({ search, list, loading }: Props) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        {search.query ? (\r\n          list && list.totalHits > 0 ? (\r\n            loading ? (\r\n              list.hits.map((item, i: number) => (\r\n                <ImageCol key={i}>\r\n                  <a data-lightbox=\"mygallery\" href={item.largeImageURL}>\r\n                    <img src={item.webformatURL} alt=\"\" />\r\n                  </a>\r\n                </ImageCol>\r\n              ))\r\n            ) : (\r\n              <div className=\"spinner\"></div>\r\n            )\r\n          ) : (\r\n            <NoData>No images found!</NoData>\r\n          )\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nPhotosList.propTypes = {\r\n  search: PropTypes.object.isRequired,\r\n  list: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nPhotosList.defaultProps = {\r\n  search: { query: \"\" },\r\n  list: {},\r\n  loading: false,\r\n};\r\n\r\nexport default PhotosList;\r\n\r\nconst ImageCol = styled.div`\r\n  padding: 20px;\r\n  img {\r\n    height: 300px;\r\n  }\r\n`;\r\n\r\nconst NoData = styled.div`\r\n  grid-column-start: 3;\r\n  grid-column-end: 5;\r\n  @media (max-width: 1900px) {\r\n    grid-column-start: 1;\r\n    grid-column-end: 5;\r\n  }\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  @media (max-width: 1900px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n  @media (max-width: 560px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Search, IList } from \"./typings\";\r\n\r\nimport SearchForm from \"./components/SearchForm\";\r\nimport PhotosList from \"./components/PhotosList\";\r\n\r\nconst App = () => {\r\n  const [search, setSearch] = useState<Search>({\r\n    query: \"\",\r\n  });\r\n  const [list, setList] = useState<IList>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h1>PixaBay Finder</h1>\r\n        <SearchForm\r\n          search={search}\r\n          setSearch={setSearch}\r\n          setList={setList}\r\n          setLoading={setLoading}\r\n        />\r\n        <PhotosList list={list} search={search} loading={loading} />\r\n        <i>Created by Fadi Hanna.</i>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst Container = styled.div`\r\n  margin: 10px;\r\n  text-align: center;\r\n`;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * \r\n  {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    outline: 0;\r\n    font-size: 100%;\r\n  }\r\n\r\n  .spinner:after {\r\n    content: \"\";\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n    top: 40%;\r\n    left: 50%;\r\n    height: 60px;\r\n    width: 60px;\r\n    margin-top: -30px;\r\n    margin-left: -30px;\r\n    border-radius: 50%;\r\n    border: 3px solid lightgray;\r\n    border-top-color: #0275d8;\r\n    animation: spinner 0.7s linear infinite;\r\n  }\r\n\r\n  @keyframes spinner {\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n\r\n  img\r\n  {\r\n    width: 100%;\r\n    max-width: 100%;\r\n    height: auto;\r\n  }\r\n\r\n  @media (max-width: 1500px)\r\n  {\r\n    body\r\n    {\r\n      margin: 0;\r\n      padding: 0;\r\n      font-size: 100%;\r\n      width: 100%;\r\n    }\r\n\r\n  }\r\n\r\n`;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport GlobalStyles from \"./global\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <GlobalStyles />\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}